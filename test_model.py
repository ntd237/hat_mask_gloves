import torch
import cv2
import os
import numpy as np
from ultralytics import YOLO

# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n
MODEL_PATH = "models/best_model.pt"
IMAGE_DIR = "data/test/images"
OUTPUT_DIR = "output/"

# ƒê·∫£m b·∫£o th∆∞ m·ª•c output t·ªìn t·∫°i
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Load m√¥ h√¨nh YOLOv8 Segment
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = YOLO(MODEL_PATH)  # Load tr·ª±c ti·∫øp m√¥ h√¨nh YOLO

# Danh s√°ch c√°c class (hat, mask, gloves)
CLASS_NAMES = ["gloves", "hat", "mask"]
COLORS = {
    "hat": (0, 255, 0),      # M√†u xanh l√°
    "mask": (255, 0, 0),     # M√†u ƒë·ªè
    "gloves": (0, 255, 255)  # M√†u v√†ng
}

# Duy·ªát qua t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c test
for image_name in os.listdir(IMAGE_DIR):
    image_path = os.path.join(IMAGE_DIR, image_name)
    img = cv2.imread(image_path)
    
    if img is None:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_name}")
        continue

    # Ch·∫°y m√¥ h√¨nh d·ª± ƒëo√°n
    results = model(image_path, conf=0.4)  # Ch·ªâ nh·∫≠n d·ª± ƒëo√°n c√≥ ƒë·ªô tin c·∫≠y > 40%

    # L·∫•y k·∫øt qu·∫£ d·ª± ƒëo√°n ƒë·∫ßu ti√™n
    result = results[0]
    masks = result.masks  # L·∫•y segmentation masks
    names = result.names  # T√™n c√°c class

    if masks is None:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y object n√†o trong ·∫£nh {image_name}")
        continue

    # V·∫Ω segmentation l√™n ·∫£nh
    for i in range(len(result.boxes)):
        class_id = int(result.boxes.cls[i])  # L·∫•y class ID
        confidence = float(result.boxes.conf[i])  # L·∫•y ƒë·ªô tin c·∫≠y
        mask = masks.data[i].cpu().numpy()  # L·∫•y mask c·ªßa object

        class_name = CLASS_NAMES[class_id]
        color = COLORS[class_name]

        # V·∫Ω v√πng segmentation
        mask = (mask > 0.5).astype(np.uint8) * 255  # Chuy·ªÉn mask v·ªÅ nh·ªã ph√¢n
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        cv2.drawContours(img, contours, -1, color, thickness=cv2.FILLED)  # T√¥ m√†u mask

        # V·∫Ω bounding box
        x1, y1, x2, y2 = map(int, result.boxes.xyxy[i])
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)

        # Vi·∫øt t√™n class v√† ƒë·ªô tin c·∫≠y
        label = f"{class_name} {confidence:.2f}"
        cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # L∆∞u ·∫£nh k·∫øt qu·∫£
    output_path = os.path.join(OUTPUT_DIR, image_name)
    cv2.imwrite(output_path, img)
    print(f"‚úÖ X·ª≠ l√Ω xong: {image_name}, l∆∞u t·∫°i {output_path}")

print("üéØ Ho√†n th√†nh nh·∫≠n di·ªán t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c test!")
